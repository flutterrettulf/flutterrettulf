<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://flutterrettulf.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://flutterrettulf.com/" rel="alternate" type="text/html" /><updated>2023-01-02T10:00:51+05:30</updated><id>https://flutterrettulf.com/feed.xml</id><title type="html">FlutterrettulF | Flutter Development Tutorails | Android | Dart | IOS | Web</title><subtitle>Flutter Development Tutorails | Android | Dart | IOS | Web</subtitle><entry><title type="html">Flutter Pro Tip: Rendering ListView inside another ListView or Column in Flutter</title><link href="https://flutterrettulf.com/flutter%20listview/2023/01/01/how-to-render-list-inside-list-flutter.html" rel="alternate" type="text/html" title="Flutter Pro Tip: Rendering ListView inside another ListView or Column in Flutter" /><published>2023-01-01T08:00:00+05:30</published><updated>2023-01-01T08:00:00+05:30</updated><id>https://flutterrettulf.com/flutter%20listview/2023/01/01/how-to-render-list-inside-list-flutter</id><content type="html" xml:base="https://flutterrettulf.com/flutter%20listview/2023/01/01/how-to-render-list-inside-list-flutter.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Welcome to our tutorial on how to render a ListView inside another ListView or Column in Flutter. If you are a Flutter developer, you may have come across situations where you want to render a ListView inside another ListView or Column in Flutter. This can be a challenging task. Sometimes, if the approach is not correct, the elements in the ListView might not be visible, or you might get while nesting ListViews. Don’t worry! In this article we’ll show you how to render a ListView inside another ListView or Column in Flutter and will also include tips and best practises to help you. We’ll go over several scenarios when it will be required and use examples to explain it. Then let’s get going.</p>

<h2 id="how-to-add-a-listview-in-a-column">How to add a <code class="language-plaintext highlighter-rouge">ListView</code> in a <code class="language-plaintext highlighter-rouge">Column</code>?</h2>

<p>Both the ListView and the Column enlarge to their fullest possible sizes along the main (vertical) axis. Therefore, utilising a ListView inside a column requires caution. As a result, you must limit the ListView’s height. There are numerous methods available; pick the one that best meets your needs.</p>

<ol>
  <li>
    <p>If you want to allow ListView to take up all remaining space inside Column, use the <code class="language-plaintext highlighter-rouge">Expanded</code> widget  or <code class="language-plaintext highlighter-rouge">Flexible</code> widget in Flutter. Let’s look at some examples below on how to use them.</p>

    <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">Column</span><span class="p">(</span>
   <span class="nl">children:</span> <span class="p">&lt;</span><span class="n">Widget</span><span class="p">&gt;[</span>
     <span class="n">SizedBox</span><span class="p">(</span>
       <span class="nl">height:</span><span class="mi">80</span>
       <span class="c1">// Some widget with fixed height</span>
     <span class="p">),</span>
     <span class="c1">// Expanded Widget allows the ListView to use the available height.</span>
     <span class="n">Expanded</span><span class="p">(</span>
       <span class="nl">child:</span> <span class="n">ListView</span><span class="p">(</span>
         <span class="c1">//ListView  properties goes here</span>
       <span class="p">),</span>
     <span class="p">)</span>
   <span class="p">],</span>
 <span class="p">);</span>
</code></pre></div>    </div>

    <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">Column</span><span class="p">(</span>
   <span class="nl">children:</span> <span class="p">&lt;</span><span class="n">Widget</span><span class="p">&gt;[</span>
     <span class="n">SizedBox</span><span class="p">(</span>
       <span class="nl">height:</span><span class="mi">80</span>
       <span class="c1">// Some widget with fixed height</span>
     <span class="p">),</span>
     <span class="n">Flexible</span><span class="p">(</span>
       <span class="nl">child:</span> <span class="n">ListView</span><span class="p">(</span>
         <span class="c1">//ListView  properties goes here</span>
       <span class="p">),</span>
     <span class="p">)</span>
   <span class="p">],</span>
 <span class="p">)</span>
</code></pre></div>    </div>

    <p>Here the <code class="language-plaintext highlighter-rouge">Flexible</code> widget will only take the space it required and <code class="language-plaintext highlighter-rouge">Expanded</code> widget will take available screen space even if there are not enough widgets to render on the full space.</p>

    <p>This is a fantastic solution because it enables the ListView to have various heights and widths, such as when you want it to only occupy the remaining space. When it’s too difficult to determine the exact height/width, it enables you to take various screen sizes into consideration.With this method, media query is avoided and the ListView can fill up the entire screen. If you want to learn more about Flutter’s Expanded Widget, <a href="/flutter_tutorials/flutter-expanded-widget" target="_blank">click here</a>.</p>
  </li>
  <li>
    <p>If you want to limit your ListView to a certain height, use <a href="/flutter_tutorials/flutter-sized-box-widget-explained-with-examples" target="_blank">SizedBox</a>. Remember that the listview also can expand with Width, so if your SizedBox isn’t working include the Width limit</p>

    <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">Column</span><span class="p">(</span>
   <span class="nl">children:</span> <span class="p">&lt;</span><span class="n">Widget</span><span class="p">&gt;[</span>
     <span class="n">SizedBox</span><span class="p">(</span>
       <span class="nl">height:</span> <span class="mi">200</span><span class="p">,</span> <span class="c1">// Constrain height or you can use the width property too.</span>
       <span class="nl">child:</span> <span class="n">ListView</span><span class="p">(</span>
         <span class="c1">//ListView properties goes here</span>
       <span class="p">),</span>
     <span class="p">)</span>
   <span class="p">],</span>
 <span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Usually the <code class="language-plaintext highlighter-rouge">ListView</code> widget will take all the available space. If your <code class="language-plaintext highlighter-rouge">ListView</code> is small,you can alter this behaviour so that the ListView just takes up the space it requires by setting <code class="language-plaintext highlighter-rouge">shrinkWrap: true</code>.</p>

    <div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">Column</span><span class="p">(</span>
     <span class="nl">children:</span> <span class="p">&lt;</span><span class="n">Widget</span><span class="p">&gt;[</span>
         <span class="n">ListView</span><span class="p">(</span>
           <span class="nl">shrinkWrap:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">//it will still scroll when there are more items</span>
         <span class="p">)</span>
     <span class="p">],</span>
 <span class="p">)</span>
</code></pre></div>    </div>
    <h2 id="how-to-add--two-listview-that-scroll-horizontally-in-a-column-">How to add  two <code class="language-plaintext highlighter-rouge">ListView</code> that scroll horizontally in a <code class="language-plaintext highlighter-rouge">Column</code> ?</h2>
    <p>Here is a diagram illustrating two ListViews inside a Column:</p>
  </li>
</ol>

<p>Each ListView is contained within its own Expanded widget, which allows it to take up the available space within the Column. Both ListViews are set to scroll horizontally, using the scrollDirection: Axis.horizontal property. If you would like to learn more about scroll direction property checkout <a href="/flutter_tutorials/flutter_list_view_explained_with_examples/#how-to-change-the-scroll-direction-of-a-listview" target="_blank">the tutorial about ListView Scroll direction</a>.</p>

<p>This layout could be implemented in Flutter using the following code:</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Column</span><span class="p">(</span>
  <span class="nl">children:</span> <span class="p">&lt;</span><span class="n">Widget</span><span class="p">&gt;[</span>
    <span class="n">Expanded</span><span class="p">(</span>
      <span class="nl">child:</span> <span class="n">ListView</span><span class="p">(</span>
        <span class="nl">scrollDirection:</span> <span class="n">Axis</span><span class="o">.</span><span class="na">horizontal</span><span class="p">,</span>
        <span class="nl">children:</span> <span class="p">&lt;</span><span class="n">Widget</span><span class="p">&gt;[</span>
          <span class="c1">// ListView 1 items go here</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">),</span>
    <span class="n">Expanded</span><span class="p">(</span>
      <span class="nl">child:</span> <span class="n">ListView</span><span class="p">(</span>
        <span class="nl">scrollDirection:</span> <span class="n">Axis</span><span class="o">.</span><span class="na">horizontal</span><span class="p">,</span>
        <span class="nl">children:</span> <span class="p">&lt;</span><span class="n">Widget</span><span class="p">&gt;[</span>
          <span class="c1">// ListView 2 items go here</span>
        <span class="p">],</span>
      <span class="p">),</span>
    <span class="p">),</span>
  <span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>
<p>In this tutorial, we have learned how to render a ListView inside another ListView or Column in Flutter. We have seen different methods to achieve this, such as using the Expanded or Flexible widget, SizedBox, and setting shrinkWrap: true. We also learned how to use the scrollDirection property to create horizontal scrolling ListViews inside a Column. We hope this tutorial has been helpful in your Flutter development journey and that you are now able to confidently render ListViews inside other widgets. We have discussed some of the combintations in which a listview and column can be used. Try to figure out if you can apply the same methods when working with <code class="language-plaintext highlighter-rouge">Row</code>.</p>

<h2 id="references">References</h2>
<p>If you want to learn more about ListView, checkout the following urls.</p>
<ol>
  <li><a href="https://api.flutter.dev/flutter/widgets/ListView/ListView.separated.html" target="_blank">ListView.separated constructor</a>
    <ul>
      <li><a href="https://api.flutter.dev/flutter/widgets/ListView/ListView.html" target="_blank">ListView constructor</a></li>
    </ul>
  </li>
  <li><a href="https://api.flutter.dev/flutter/widgets/ListView/ListView.builder.html" target="_blank">ListView.builder constructor</a></li>
  <li><a href="https://api.flutter.dev/flutter/widgets/ListView/ListView.custom.html" target="_blank">ListView.custom constructor</a></li>
</ol>

<h2 id="related-articles">Related Articles</h2>
<p>Checkout some of the articles about ListView on Flutterrettulf.</p>
<ol>
  <li><a href="/flutter_tutorials/flutter_list_view_explained_with_examples" target="_blank">Flutter: Listview Exmplained with Examples.</a></li>
  <li><a href="/flutter%20listview/2022/11/28/how-to-create-a-listview-with-items-seperated.html" target="_blank">How to create a ListView with a separator between items in flutter?</a></li>
</ol>]]></content><author><name></name></author><category term="Flutter ListView" /><category term="ListView" /><category term="FlutterListView" /><category term="Columns" /><category term="NestedListView" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Flutter Scrollable Columns: The Complete Guide</title><link href="https://flutterrettulf.com/flutter%20column/2022/12/31/how-to-make-a-column-widget-scrollable-in-flutter.html" rel="alternate" type="text/html" title="Flutter Scrollable Columns: The Complete Guide" /><published>2022-12-31T00:00:00+05:30</published><updated>2022-12-31T00:00:00+05:30</updated><id>https://flutterrettulf.com/flutter%20column/2022/12/31/how%20-to-make-a-column-widget-scrollable-in-flutter</id><content type="html" xml:base="https://flutterrettulf.com/flutter%20column/2022/12/31/how-to-make-a-column-widget-scrollable-in-flutter.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Welcome to our blog post about making a column scrollable in Flutter! If you’re building a mobile application using Flutter, you may have encountered a situation where you want to display a lot of content in a single screen, but it doesn’t all fit on the device. One way to solve this problem is to make the column scrollable, so that the user can swipe up and down to see all of the content. In this post, we’ll show you how to make a column scrollable in Flutter and share some tips on how to customize the scrolling behavior to fit your needs.</p>

<h2 id="how-to-add-scrolling-to-your-flutter-columns">How to Add Scrolling to Your Flutter Columns?</h2>

<p>The easiest method to achieve a scrollable <code class="language-plaintext highlighter-rouge">Column</code> in Flutter is to use the <code class="language-plaintext highlighter-rouge">SingleChildScrollView</code> widget. It gives us a box in which a single widget can be scrolled. This widget is helpful when a single box, which will typically be completely visible, but you need to ensure that it can be scrolled if the container is too small in one axis.</p>

<h2 id="using-singlechildscrollview-with-a-column">Using <code class="language-plaintext highlighter-rouge">SingleChildScrollView</code> with a <code class="language-plaintext highlighter-rouge">Column</code></h2>
<p>There might be situations where some devices’ screens are extremely small, the application can be utilised in landscape mode even though the aspect ratio is different from what was intended, or the application is being displayed in a small window in split-screen mode. In any case, it might be sensible to enclose the layout in a <code class="language-plaintext highlighter-rouge">SingleChildScrollView</code> as a result. This makes sure that when the application is viewed under normal circumstances, the content is always visible and when the screen size is smaller than expected, the content is scrollable.</p>

<p>Let’s take the following example.</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SingleChildScrollView</span><span class="p">(</span>
    <span class="nl">child:</span> <span class="n">SizedBox</span><span class="p">(</span>
        <span class="nl">height:</span><span class="mi">240</span><span class="p">,</span>
        <span class="nl">child:</span><span class="n">Column</span><span class="p">(</span>
            <span class="nl">children:</span> <span class="p">&lt;</span><span class="n">Widget</span><span class="p">&gt;[</span>
                <span class="n">Container</span><span class="p">(</span>
                    <span class="c1">// A fixed-height child.</span>
                    <span class="nl">height:</span> <span class="mf">120.0</span><span class="p">,</span>
                    <span class="nl">child:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Fixed Height Content'</span><span class="p">),</span>
                <span class="p">),</span>
                <span class="n">Container</span><span class="p">(</span>
                    <span class="c1">// Another fixed-height child.</span>
                    <span class="nl">height:</span> <span class="mf">120.0</span><span class="p">,</span>
                    <span class="nl">child:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Fixed Height Content'</span><span class="p">),</span>
                <span class="p">),</span>
            <span class="p">]</span>
        <span class="p">)</span>
    <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>
<p>In the above example, we are using a <code class="language-plaintext highlighter-rouge">SingleChildScrollView</code> with a <code class="language-plaintext highlighter-rouge">Column</code> containing two children. The children have a fixed height. The column is placed inside a SizedBox with a fixed height. As you might know, the <code class="language-plaintext highlighter-rouge">Column</code> will try to occupy all available space it gets. When it is placed inside a <code class="language-plaintext highlighter-rouge">SingleChildScrollView</code>, the available space is infinite. The <code class="language-plaintext highlighter-rouge">Column</code> will try to fill all available space and this might create a conflict. In order to solve this conflict, we place it inside a <code class="language-plaintext highlighter-rouge">SizedBox</code> with a fixed height.</p>

<h2 id="efficieny-of-using-singlecildscrollview-vs-listview">Efficieny of using SingleCildScrollView vs ListView</h2>
<p>If the viewport is expected to usually contain content beyond the dimensions of the screen, then SingleChildScrollView would be very expensive. According to the official flutter documentation for <a href="https://api.flutter.dev/flutter/widgets/SingleChildScrollView-class.html" target="_blank">SingleChildScrollView</a>, it is better to use a ListView instead of a SingleChildScrollView that contains a ListBody or Column with many children when you have a list of children and do not need cross-axis shrink-wrapping behaviour, such as when creating a scrolling list that is always the width of the screen.</p>

<h2 id="references">References</h2>
<ul>
  <li><a href="https://api.flutter.dev/flutter/widgets/SingleChildScrollView-class.html" target="_blank">Flutter Documentation for SingleChildScrollView</a></li>
</ul>]]></content><author><name></name></author><category term="Flutter Column" /><category term="Flutter" /><category term="Scrollable column" /><category term="Scrolling" /><category term="Customize scrolling" /><category term="Column widget" /><category term="Single screen" /><category term="SingleChildScrollView" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Flutter: Elevated Button Examples.</title><link href="https://flutterrettulf.com/flutter%20buttons/2022/09/09/flutter-elevated-button-examples.html" rel="alternate" type="text/html" title="Flutter: Elevated Button Examples." /><published>2022-09-09T05:30:00+05:30</published><updated>2022-09-09T05:30:00+05:30</updated><id>https://flutterrettulf.com/flutter%20buttons/2022/09/09/flutter-elevated-button-examples</id><content type="html" xml:base="https://flutterrettulf.com/flutter%20buttons/2022/09/09/flutter-elevated-button-examples.html"><![CDATA[<h2 id="what-is-elevatedbutton-in-flutter">What is ElevatedButton in Flutter?</h2>

<p>Elevated Button is a flutter component included inside the material package i.e. “package:flutter/material.dart“. It is a label child displayed on a Material widget whose elevation increases when the button is pressed. The label’s Text and Icon widgets are displayed in style’s ButtonStyle.foregroundColor and the button’s filled background is the ButtonStyle.backgroundColor. It is a Material Design button that lifts and displays ink reactions on press. It is a filled button with a material design elevation and drop shadow. Since they use color fill and shadow, they are often used to indicate a primary action in an app. They are also used to indicate a primary action in a dialog. We will see some examples of ElevatedButton in Flutter.</p>

<p>You can read more about ElevatedButton in Flutter from <a href="https://api.flutter.dev/flutter/material/ElevatedButton-class.html" target="_blank">Flutter ElevatedButton - class</a>.</p>

<h2 id="what-are-the-states-of-elevated-button-in-flutter">What are the states of Elevated Button in Flutter?</h2>

<p>There are 5 states of Elevated Button in Flutter. They are:</p>
<ol>
  <li>Normal</li>
  <li>Hover</li>
  <li>Focus</li>
  <li>Pressed</li>
  <li>Disabled</li>
</ol>

<h3 id="how-to-enable--disable-elevated-button-in-flutter">How to enable / disable Elevated Button in Flutter?</h3>
<p>If onPressed and onLongPress callbacks are null, then the button will be disabled.</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This button has an onPressed callback, so it is enabled and will react to hover and press.</span>
<span class="n">ElevatedButton</span><span class="p">(</span>
  <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{},</span>
  <span class="nl">child:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Button1'</span><span class="p">),</span>
<span class="p">),</span>
</code></pre></div></div>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This button is disabled because onPressed is null, so it will not react to hover or press.</span>
<span class="n">ElevatedButton</span><span class="p">(</span>
  <span class="nl">onPressed:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="nl">child:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Button2'</span><span class="p">),</span>
<span class="p">),</span>
</code></pre></div></div>

<p>The onPressed and onLongPress callbacks can be based on the state of the app, or they can be hardcoded. For example, if the app has a form with one field, then the button can be disabled until the form is valid.</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This button is will be enabled only when the `_formIsValid` variable is changed to true.</span>
<span class="n">ElevatedButton</span><span class="p">(</span>
  <span class="nl">onPressed:</span> <span class="n">_formIsValid</span> <span class="o">?</span> <span class="p">()</span> <span class="p">{}</span> <span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="nl">child:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Button3'</span><span class="p">),</span>
<span class="p">),</span>
</code></pre></div></div>

<h2 id="how-do-you-give-an-elevated-button-style-in-flutter">How do you give an elevated button style in Flutter?</h2>

<p>The elevated button’s default style is defined by defaultStyleOf. The button child’s Text and Icon widgets are rendered with the ButtonStyle’s foreground color. The button’s InkWell adds the style’s overlay color when the button is focused, hovered or pressed. The button’s background color becomes its Material color.</p>

<p>The style of a single elevated button can be overridden with its style parameter. The style of all elevated buttons in a subtree can be overridden with the ElevatedButtonTheme, and the style of all of the elevated buttons in an app can be overridden with the Theme’s ThemeData.elevatedButtonTheme property.</p>

<p>The static styleFrom method is a convenient way to create a elevated button ButtonStyle from simple values.</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// This button's style is defined by the ElevatedButton.styleFrom method.</span>
<span class="n">ElevatedButton</span><span class="p">(</span>
  <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{},</span>
  <span class="nl">style:</span> <span class="n">ElevatedButton</span><span class="o">.</span><span class="na">styleFrom</span><span class="p">(</span>
    <span class="nl">primary:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">red</span><span class="p">,</span> <span class="c1">// background color</span>
    <span class="nl">onPrimary:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span> <span class="c1">// foreground color</span>
    <span class="nl">shadowColor:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">green</span><span class="p">,</span> <span class="c1">// elevation color</span>
    <span class="nl">elevation:</span> <span class="mi">5</span><span class="p">,</span> <span class="c1">// elevation of button</span>
  <span class="p">),</span>
  <span class="nl">child:</span> <span class="kd">const</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Button3'</span><span class="p">),</span>
<span class="p">),</span>
</code></pre></div></div>

<p>You can read more about styleFrom in Flutter from <a href="https://api.flutter.dev/flutter/material/ElevatedButton/styleFrom.html" target="_blank">Flutter ElevatedButton.styleFrom - method</a>.</p>

<h3 id="the-buttonstyle-class">The ButtonStyle Class</h3>
<p>The ButtonStyle class is used to define all the visual properties that most buttons have in common.</p>

<p>Buttons and their themes have a ButtonStyle property which defines the visual properties whose default values are to be overridden. The default values are defined by the individual button widgets and are typically based on overall theme’s ThemeData.colorScheme and ThemeData.textTheme.</p>

<p>All of the ButtonStyle properties are null by default.</p>

<h3 id="how-to-define-style-for-different-states-of-elevatedbutton-in-flutter">How to define style for different states of ElevatedButton in Flutter?</h3>
<p>Many of the ButtonStyle properties are MaterialStateProperty objects which resolve to different values depending on the button’s state.</p>

<p>For example the Color properties are defined with MaterialStateProperty<Color> and can resolve to different colors depending on if the button is pressed, hovered, focused, disabled, etc.These properties can override the default value for just one state or all of them.</Color></p>

<p><strong>For example</strong> to create a ElevatedButton whose background color is the color scheme’s primary color with 50% opacity, but only when the button is pressed, one could write:</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ElevatedButton</span><span class="p">(</span>
  <span class="nl">style:</span> <span class="n">ButtonStyle</span><span class="p">(</span>
    <span class="nl">backgroundColor:</span> <span class="n">MaterialStateProperty</span><span class="o">.</span><span class="na">resolveWith</span><span class="p">&lt;</span><span class="n">Color</span><span class="o">?</span><span class="p">&gt;(</span>
      <span class="p">(</span><span class="kt">Set</span><span class="p">&lt;</span><span class="n">MaterialState</span><span class="p">&gt;</span> <span class="n">states</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">states</span><span class="o">.</span><span class="na">contains</span><span class="p">(</span><span class="n">MaterialState</span><span class="o">.</span><span class="na">pressed</span><span class="p">))</span>
          <span class="k">return</span> <span class="n">Theme</span><span class="o">.</span><span class="na">of</span><span class="p">(</span><span class="n">context</span><span class="p">)</span><span class="o">.</span><span class="na">colorScheme</span><span class="o">.</span><span class="na">primary</span><span class="o">.</span><span class="na">withOpacity</span><span class="p">(</span><span class="mf">0.5</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// Use the component's default.</span>
      <span class="p">},</span>
    <span class="p">),</span>
  <span class="p">),</span>
<span class="p">)</span>

</code></pre></div></div>
<p><strong>Another example</strong> to create an ElevatedButton with a different background color for the disabled state, one could write:</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ElevatedButton</span><span class="p">(</span>
  <span class="nl">style:</span> <span class="n">ButtonStyle</span><span class="p">(</span>
    <span class="nl">backgroundColor:</span> <span class="n">MaterialStateProperty</span><span class="o">.</span><span class="na">resolveWith</span><span class="p">&lt;</span><span class="n">Color</span><span class="o">?</span><span class="p">&gt;(</span>
      <span class="p">(</span><span class="kt">Set</span><span class="p">&lt;</span><span class="n">MaterialState</span><span class="p">&gt;</span> <span class="n">states</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">states</span><span class="o">.</span><span class="na">contains</span><span class="p">(</span><span class="n">MaterialState</span><span class="o">.</span><span class="na">disabled</span><span class="p">))</span>
          <span class="k">return</span> <span class="n">Colors</span><span class="o">.</span><span class="na">grey</span><span class="p">;</span>
        <span class="k">return</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// Use the component's default.</span>
      <span class="p">},</span>
    <span class="p">),</span>
  <span class="p">),</span>
<span class="p">)</span>
</code></pre></div></div>

<p>In this case the background color for all other button states would fallback to the ElevatedButton’s default values.</p>

<p>To <strong>unconditionally</strong> set the button’s backgroundColor for all states one could write:</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ElevatedButton</span><span class="p">(</span>
  <span class="nl">style:</span> <span class="n">ButtonStyle</span><span class="p">(</span>
    <span class="nl">backgroundColor:</span> <span class="n">MaterialStatePropertyAll</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;(</span><span class="n">Colors</span><span class="o">.</span><span class="na">green</span><span class="p">),</span>
  <span class="p">),</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Configuring a ButtonStyle directly makes it possible to very precisely control the button’s visual attributes for all states. This level of control is typically required when a custom “branded” look and feel is desirable. However, in many cases it’s useful to make relatively sweeping changes based on a few initial parameters with simple values. The button styleFrom() methods enable such sweeping changes.</p>

<p>To configure all of the application’s ElevatedButtons in the same way, specify the overall theme’s elevatedButtonTheme property.</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ThemeData</span><span class="p">(</span>
  <span class="nl">elevatedButtonTheme:</span> <span class="n">ElevatedButtonThemeData</span><span class="p">(</span>
    <span class="nl">style:</span> <span class="n">ElevatedButtonThemeData</span><span class="p">(</span>
      <span class="nl">style:</span> <span class="n">ElevatedButton</span><span class="o">.</span><span class="na">styleFrom</span><span class="p">(</span>
        <span class="nl">primary:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">blue</span><span class="p">,</span>
        <span class="nl">onPrimary:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
        <span class="nl">shape:</span> <span class="n">RoundedRectangleBorder</span><span class="p">(</span>
          <span class="nl">borderRadius:</span> <span class="n">BorderRadius</span><span class="o">.</span><span class="na">circular</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span>
        <span class="p">),</span>
        <span class="nl">minimumSize:</span> <span class="n">Size</span><span class="p">(</span><span class="mi">88</span><span class="p">,</span> <span class="mi">36</span><span class="p">),</span>
      <span class="p">),</span>
    <span class="p">)</span>
  <span class="p">),</span>
<span class="p">)</span>
</code></pre></div></div>
<!-- 
### Changing border style of ElevatedButton in Flutter.
We use the Border.all() method to change the border style of ElevatedButton in Flutter. We can change the border color, border width, and border style. We can also change the border radius of ElevatedButton in Flutter. We can use the BorderRadius.circular() method to change the border radius of ElevatedButton in Flutter. We can also use the BorderRadius.only() method to change the border radius of ElevatedButton in Flutter. We can also use the BorderRadius.all() method to change the border radius of ElevatedButton in Flutter. We can also use the BorderRadius.zero() method to change the border radius of ElevatedButton in Flutter. We can also use the BorderRadiusDirectional.circular() method to change the border radius of ElevatedButton in Flutter. We can also use the BorderRadiusDirectional.only() method to change the border radius of ElevatedButton in Flutter. We can also use the BorderRadiusDirectional.all() method to change the border radius of ElevatedButton in Flutter. We can also use the BorderRadiusDirectional.zero() method to change the border radius of ElevatedButton in Flutter.


### Change padding of Elevated Button in Flutter
We can override the padding in style property of an elevated button. 
For example:
  
  ```dart
  ElevatedButton(
    style: ElevatedButton.styleFrom(
      padding: EdgeInsets.all(20),
    ),
    onPressed: () {},
    child: Text('Elevated Button'),
  );
  ```

### Change width of Elevated Button in Flutter
### Change height of Elevated Button in Flutter -->

<h3 id="how-do-you-give-elevation-to-an-elevated-button">How do you give elevation to an elevated button?</h3>
<p>We can override the elevation in style property of an elevated button or provide a common elevation to all the elevated buttons in the app using the theme.</p>

<p>For example:</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ElevatedButton</span><span class="p">(</span>
  <span class="nl">style:</span> <span class="n">ElevatedButton</span><span class="o">.</span><span class="na">styleFrom</span><span class="p">(</span>
    <span class="nl">elevation:</span> <span class="mi">20</span><span class="p">,</span>
  <span class="p">),</span>
  <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{},</span>
  <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Elevated Button'</span><span class="p">),</span>
<span class="p">);</span>
</code></pre></div></div>

<h3 id="how-do-you-give-shadow-to-an-elevated-button">How do you give shadow to an elevated button?</h3>

<p>We can give shadow to an elevated button by using the shadowColor property of an elevated button. We can also give shadow to an elevated button by using the style property of an elevated button. We can override the shadowColor in style property of an elevated button.</p>

<p>For example:</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ElevatedButton</span><span class="p">(</span>
  <span class="nl">style:</span> <span class="n">ElevatedButton</span><span class="o">.</span><span class="na">styleFrom</span><span class="p">(</span>
    <span class="nl">shadowColor:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">red</span><span class="p">,</span>
  <span class="p">),</span>
  <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{},</span>
  <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Elevated Button'</span><span class="p">),</span>
<span class="p">);</span>
</code></pre></div></div>

<h2 id="how-can-we-show-an-elevatedbutton-with-an-icon-in-flutter">How can we show an ElevatedButton with an icon in Flutter?</h2>
<p>In order to show an elevated button with icon in flutter, we use the ElevatedButton.icon() constructor.</p>

<p><strong>For example:</strong></p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ElevatedButton</span><span class="o">.</span><span class="na">icon</span><span class="p">(</span>
  <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{},</span>
  <span class="nl">icon:</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="o">.</span><span class="na">add</span><span class="p">),</span>
  <span class="nl">label:</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Add'</span><span class="p">),</span>
<span class="p">)</span>
</code></pre></div></div>
<p>If you want to learn more about the ElevatedButton.icon constructor, you can read the official documentation here. <a href="https://api.flutter.dev/flutter/material/ElevatedButton/ElevatedButton.icon.html" target="_blank">ElevatedButton.icon</a>.</p>

<h2 id="elevatedbutton-vs-raisedbutton-in-flutter-is-raised-button-deprecated-in-flutter">ElevatedButton vs RaisedButton in Flutter. Is Raised button deprecated in Flutter?</h2>
<p>As of June 2022, the RaisedButton widget is deprecated. It is recommended that you use the ElevatedButton widget instead. The RaisedButton widget will be removed in a future version of Flutter.</p>

<h2 id="conclusion">Conclusion</h2>
<p>ElevatedButton is a Material Design button that lifts and displays ink reactions on press. It is a filled button whose material elevates when pressed. An ElevatedButton consists of a text label, an icon, or both, displayed in a filled Material widget. The text label is displayed in the style defined by the button’s overall Theme, with the color taken from the button’s ButtonStyle. The ElevatedButton is usually used to indicate a primary action in an application.</p>

<p>You can find the source code for this tutorial on GitHub. If you found this tutorial helpful, please share it with your friends. Thanks for reading!</p>

<p><a href="https://github.com/flutterrettulf/elevatedbutton_demo" target="_blank">Source Code for Flutter ElevatedButton Tutorial</a>.</p>

<h2 id="references">References</h2>
<ul>
  <li><a href="https://api.flutter.dev/flutter/material/ElevatedButton-class.html" target="_blank">ElevatedButton</a></li>
  <li><a href="https://api.flutter.dev/flutter/material/ElevatedButton/ElevatedButton.icon.html" target="_blank">ElevatedButton.icon</a></li>
  <li><a href="https://api.flutter.dev/flutter/material/ElevatedButton/styleFrom.html" target="_blank">ElevatedButton.styleFrom</a></li>
</ul>

<!-- The icon is displayed in the color defined by the button’s ButtonStyle, and the size is defined by the overall IconTheme.  -->]]></content><author><name></name></author><category term="Flutter Buttons" /><category term="ElevatedButton" /><category term="ElevatedButtonExamples" /><category term="ElevatedButtonWidget" /><category term="ElevatedButtonFlutter" /><summary type="html"><![CDATA[What is ElevatedButton in Flutter?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://flutterrettulf.com/assets/img/flutter_elevatedbutton_demo/flutter_elevated_button_demo.png" /><media:content medium="image" url="https://flutterrettulf.com/assets/img/flutter_elevatedbutton_demo/flutter_elevated_button_demo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to use WillPopScope widget in Flutter with examples.</title><link href="https://flutterrettulf.com/navigation/2022/09/03/how-to-use-willpopscope-widget-in-flutter-with-examples.html" rel="alternate" type="text/html" title="How to use WillPopScope widget in Flutter with examples." /><published>2022-09-03T05:30:00+05:30</published><updated>2022-09-03T05:30:00+05:30</updated><id>https://flutterrettulf.com/navigation/2022/09/03/how-to%20use-willpopscope-widget-in-flutter-with-examples</id><content type="html" xml:base="https://flutterrettulf.com/navigation/2022/09/03/how-to-use-willpopscope-widget-in-flutter-with-examples.html"><![CDATA[<p>In this article, we will discuss how to use the WillPopScope class in Flutter.</p>

<h2 id="what-is-willpopscope">What is WillPopScope?</h2>

<p>WillPopScope class in Flutter is used to create a Widget that registers a callback to veto attempts by the user to dismiss the enclosing ModalRoute. In other words, it can be used to override what happens when a user presses the back button on the device or pops the current route.</p>

<p><strong>The constructor of the class is as follows:</strong></p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">WillPopScope</span><span class="p">({</span>
  <span class="n">Key</span><span class="o">?</span> <span class="n">key</span><span class="p">,</span>
  <span class="kd">required</span> <span class="n">WillPopCallback</span><span class="o">?</span> <span class="n">onWillPop</span><span class="p">,</span>
  <span class="kd">required</span> <span class="n">Widget</span> <span class="n">child</span><span class="p">,</span>
<span class="p">})</span>

<span class="n">WillPopCallback</span> <span class="o">=</span> <span class="n">Future</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="kt">Function</span><span class="p">()</span> <span class="c1">// Signature for a callback that verifies that it's OK to call Navigator.pop</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">child</code> argument is required. It is the child widget of the WillPopScope widget. <code class="language-plaintext highlighter-rouge">onWillPop</code> argument is optional. It is a callback function that returns a Future value. The callback function is called when the user tries to dismiss the enclosing route. The callback function returns a Future value. If the Future value is true, the enclosing route is popped. If the Future value is false, the enclosing route is not popped.</p>

<h2 id="where-do-we-use-the-willpopscope-widget">Where do we use the WillPopScope widget?</h2>
<p>The WillPopScope widget can be used to intercept the back button press event.</p>
<ol>
  <li>It can be used to prevent the user from navigating back to the previous screen based on some condition.</li>
  <li>It can also be used to perform some action before navigating back to the previous screen.</li>
</ol>

<h2 id="how-to-use-the-willpopscope-widget">How to use the WillPopScope widget?</h2>
<p>Let’s see how we can use the WillPopScope widget in Flutter.</p>

<p><strong>Example 1: Using WillPopScope to prevent the user from navigating back to the previous screen.</strong></p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">PreventNavigatingBAck</span> <span class="kd">extends</span> <span class="n">StatelessWidget</span> <span class="p">{</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">WillPopScope</span><span class="p">(</span>
      <span class="nl">onWillPop:</span> <span class="p">()</span> <span class="kd">async</span> <span class="o">=</span><span class="p">&gt;</span> <span class="kc">false</span><span class="p">,</span>
      <span class="nl">child:</span> <span class="n">Scaffold</span><span class="p">(</span>
        <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span>
          <span class="nl">title:</span> <span class="n">Text</span><span class="p">(</span><span class="s">"WillPopScope Demo"</span><span class="p">),</span>
        <span class="p">),</span>
        <span class="nl">body:</span> <span class="n">Center</span><span class="p">(</span>
          <span class="nl">child:</span> <span class="n">Column</span><span class="p">(</span>
            <span class="nl">mainAxisAlignment:</span> <span class="n">MainAxisAlignment</span><span class="o">.</span><span class="na">center</span><span class="p">,</span>
            <span class="nl">children:</span> <span class="p">&lt;</span><span class="n">Widget</span><span class="p">&gt;[</span>
              <span class="n">Text</span><span class="p">(</span>
                <span class="s">'This route shall not be popped!'</span><span class="p">,</span>
              <span class="p">),</span>
      
            <span class="p">],</span>
          <span class="p">),</span>
        <span class="p">),</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the above example, we have used the WillPopScope widget to prevent the user from navigating back to the previous screen. We have set the <code class="language-plaintext highlighter-rouge">onWillPop</code> argument to a callback function that returns a Future value. The callback function returns a Future value of false. So, the enclosing route is not popped.</p>

<p><strong>Example 2: Using WillPopScope to check a condition before navigating back to the previous screen.</strong></p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">class</span> <span class="nc">CheckConditionBeforeNavigatingBack</span> <span class="kd">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="n">_CheckConditionBeforeNavigatingBackState</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span>
      <span class="n">_CheckConditionBeforeNavigatingBackState</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">_CheckConditionBeforeNavigatingBackState</span>
    <span class="kd">extends</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">CheckConditionBeforeNavigatingBack</span><span class="p">&gt;</span> <span class="p">{</span>
  <span class="kt">bool</span> <span class="n">_canPop</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">WillPopScope</span><span class="p">(</span>
      <span class="nl">onWillPop:</span> <span class="p">()</span> <span class="kd">async</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_canPop</span><span class="p">,</span>
      <span class="nl">child:</span> <span class="n">Scaffold</span><span class="p">(</span>
        <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span>
          <span class="nl">title:</span> <span class="n">Text</span><span class="p">(</span><span class="s">"WillPopScope Demo"</span><span class="p">),</span>
        <span class="p">),</span>
        <span class="nl">body:</span> <span class="n">Center</span><span class="p">(</span>
          <span class="nl">child:</span> <span class="n">Column</span><span class="p">(</span>
            <span class="nl">mainAxisAlignment:</span> <span class="n">MainAxisAlignment</span><span class="o">.</span><span class="na">center</span><span class="p">,</span>
            <span class="nl">children:</span> <span class="p">&lt;</span><span class="n">Widget</span><span class="p">&gt;[</span>
              <span class="n">Text</span><span class="p">(</span>
                <span class="s">'This route can be popped only if the condition is met.'</span><span class="p">,</span>
              <span class="p">),</span>
              <span class="n">SizedBox</span><span class="p">(</span>
                <span class="nl">height:</span> <span class="mi">20</span><span class="p">,</span>
              <span class="p">),</span>
              <span class="n">ElevatedButton</span><span class="p">(</span>
                <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{</span>
                  <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
                    <span class="n">_canPop</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
                  <span class="p">});</span>
                <span class="p">},</span>
                <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span><span class="s">"Set condition to true"</span><span class="p">),</span>
              <span class="p">),</span>
            <span class="p">],</span>
          <span class="p">),</span>
        <span class="p">),</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the above example, we have used the WillPopScope widget to check a condition before navigating back to the previous screen. We have set the <code class="language-plaintext highlighter-rouge">onWillPop</code> argument to a callback function that returns a Future value. The callback function returns a Future value of <code class="language-plaintext highlighter-rouge">_canPop</code>. So, the enclosing route is popped only if the <code class="language-plaintext highlighter-rouge">_canPop</code> variable is true. Otherwise, the enclosing route is not popped. We have set the <code class="language-plaintext highlighter-rouge">_canPop</code> variable to true when the user clicks on the ElevatedButton. So, the enclosing route is popped only after the user clicks on the ElevatedButton.</p>

<h2 id="example-3-using-willpopscope-to-perform-an-action-before-navigating-back-to-the-previous-screen">Example 3: Using WillPopScope to perform an action before navigating back to the previous screen.</h2>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">PerformActionBeforeNavigatingBack</span> <span class="kd">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="n">_PerformActionBeforeNavigatingBackState</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span>
      <span class="n">_PerformActionBeforeNavigatingBackState</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">_PerformActionBeforeNavigatingBackState</span>
    <span class="kd">extends</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">PerformActionBeforeNavigatingBack</span><span class="p">&gt;</span> <span class="p">{</span>
  <span class="kt">bool</span> <span class="n">_canPop</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">WillPopScope</span><span class="p">(</span>
      <span class="nl">onWillPop:</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_canPop</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="n">showDialog</span><span class="p">(</span>
            <span class="nl">context:</span> <span class="n">context</span><span class="p">,</span>
            <span class="nl">builder:</span> <span class="p">(</span><span class="n">context</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">AlertDialog</span><span class="p">(</span>
              <span class="nl">title:</span> <span class="n">Text</span><span class="p">(</span><span class="s">"Alert"</span><span class="p">),</span>
              <span class="nl">content:</span> <span class="n">Text</span><span class="p">(</span><span class="s">"Are you sure you want to exit?"</span><span class="p">),</span>
              <span class="nl">actions:</span> <span class="p">[</span>
                <span class="n">TextButton</span><span class="p">(</span>
                  <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="n">Navigator</span><span class="o">.</span><span class="na">of</span><span class="p">(</span><span class="n">context</span><span class="p">)</span><span class="o">.</span><span class="na">pop</span><span class="p">();</span>
                  <span class="p">},</span>
                  <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span><span class="s">"No"</span><span class="p">),</span>
                <span class="p">),</span>
                <span class="n">TextButton</span><span class="p">(</span>
                  <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
                      <span class="n">_canPop</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
                    <span class="p">});</span>
                    <span class="n">Navigator</span><span class="o">.</span><span class="na">of</span><span class="p">(</span><span class="n">context</span><span class="p">)</span><span class="o">.</span><span class="na">pop</span><span class="p">();</span>
                  <span class="p">},</span>
                  <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span><span class="s">"Yes"</span><span class="p">),</span>
                <span class="p">),</span>
              <span class="p">],</span>
            <span class="p">),</span>
          <span class="p">);</span>
          <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">},</span>
      <span class="nl">child:</span> <span class="n">Scaffold</span><span class="p">(</span>
        <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span>
          <span class="nl">title:</span> <span class="n">Text</span><span class="p">(</span><span class="s">"WillPopScope Demo"</span><span class="p">),</span>
        <span class="p">),</span>
        <span class="nl">body:</span> <span class="n">Center</span><span class="p">(</span>
          <span class="nl">child:</span> <span class="n">Column</span><span class="p">(</span>
            <span class="nl">mainAxisAlignment:</span> <span class="n">MainAxisAlignment</span><span class="o">.</span><span class="na">center</span><span class="p">,</span>
            <span class="nl">children:</span> <span class="p">&lt;</span><span class="n">Widget</span><span class="p">&gt;[</span>
              <span class="n">Text</span><span class="p">(</span>
                <span class="s">'This route can be popped only if the condition is met.'</span><span class="p">,</span>
              <span class="p">),</span>
              <span class="n">SizedBox</span><span class="p">(</span>
                <span class="nl">height:</span> <span class="mi">20</span><span class="p">,</span>
              <span class="p">),</span>
              <span class="n">ElevatedButton</span><span class="p">(</span>
                <span class="nl">onPressed:</span> <span class="p">()</span> <span class="p">{</span>
                  <span class="n">setState</span><span class="p">(()</span> <span class="p">{</span>
                    <span class="n">_canPop</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
                  <span class="p">});</span>
                <span class="p">},</span>
                <span class="nl">child:</span> <span class="n">Text</span><span class="p">(</span><span class="s">"Set condition to true"</span><span class="p">),</span>
              <span class="p">),</span>
            <span class="p">],</span>
          <span class="p">),</span>
        <span class="p">),</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the above example, we have used the WillPopScope widget to perform an action before navigating back to the previous screen. We have set the <code class="language-plaintext highlighter-rouge">onWillPop</code> argument to a callback function that returns a Future value. The callback function returns a Future value of <code class="language-plaintext highlighter-rouge">_canPop</code>. So, the enclosing route is popped only if the <code class="language-plaintext highlighter-rouge">_canPop</code> variable is true. Otherwise, a dialog box is shown to the user. The user can either click on the Yes button to set the <code class="language-plaintext highlighter-rouge">_canPop</code> variable to true or click on the No button to dismiss the dialog box. So, the enclosing route is popped only after the user clicks on the Yes button.</p>

<h2 id="conclusion">Conclusion</h2>
<p>In this tutorial, we have learned about the WillPopScope widget in Flutter. We have seen how to use the WillPopScope widget to prevent the user from navigating back to the previous screen, check a condition before navigating back to the previous screen, and perform an action before navigating back to the previous screen.</p>

<h2 id="references">References</h2>

<ol>
  <li><a href="https://api.flutter.dev/flutter/widgets/WillPopScope-class.html" target="_blank">WillPopScope</a></li>
</ol>]]></content><author><name></name></author><category term="Navigation" /><category term="WillPopScope" /><category term="Navigation" /><summary type="html"><![CDATA[In this article, we will discuss how to use the WillPopScope class in Flutter.]]></summary></entry><entry><title type="html">How to disable the backbutton in Flutter using WillPopScope.</title><link href="https://flutterrettulf.com/navigation/2022/09/03/how-to-disable-backbutton-in-flutter-using-willpopscope.html" rel="alternate" type="text/html" title="How to disable the backbutton in Flutter using WillPopScope." /><published>2022-09-03T05:30:00+05:30</published><updated>2022-09-03T05:30:00+05:30</updated><id>https://flutterrettulf.com/navigation/2022/09/03/how-to-disable-backbutton-in-flutter-using-willpopscope</id><content type="html" xml:base="https://flutterrettulf.com/navigation/2022/09/03/how-to-disable-backbutton-in-flutter-using-willpopscope.html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>WillPopScope class in Flutter is used to create a Widget that registers a callback to veto attempts by the user to dismiss the enclosing ModalRoute. This is useful when you want to prevent the user from accidentally exiting the app or navigating back to the previous screen.</p>

<p>If you want to know more about the WillPopScope widget, you can read the article <a href="/navigation/2022/09/03/how-to-use-willpopscope-widget-in-flutter-with-examples.html">How to use the WillPopScope widget in Flutter</a></p>

<p>In this article, we will see how to disable the backbutton in Flutter using the WillPopScope widget.</p>

<h2 id="how-to-disable-the-backbutton-in-flutter-using-willpopscope">How to disable the backbutton in Flutter using WillPopScope</h2>

<p>The WillPopScope widget allows us to intercept the back button press event. It provides a callback that is called when the user tries to dismiss the enclosing route. If the callback returns a Future that resolves to true, the enclosing route will be popped; otherwise the back button press is ignored.</p>

<p>In order to disable the backbutton in Flutter, we need to return false from the onWillPop callback. Let’s see how to implement this functionality.</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">DisableBackButton</span> <span class="kd">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="n">_DisableBackButtonState</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">_DisableBackButtonState</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">_DisableBackButtonState</span> <span class="kd">extends</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">DisableBackButton</span><span class="p">&gt;</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">WillPopScope</span><span class="p">(</span>
      <span class="nl">onWillPop:</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
      <span class="p">},</span>
      <span class="nl">child:</span> <span class="n">Scaffold</span><span class="p">(</span>
        <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span>
          <span class="nl">title:</span> <span class="n">Text</span><span class="p">(</span><span class="s">"WillPopScope Demo"</span><span class="p">),</span>
        <span class="p">),</span>
        <span class="nl">body:</span> <span class="n">Center</span><span class="p">(</span>
          <span class="nl">child:</span> <span class="n">Column</span><span class="p">(</span>
            <span class="nl">mainAxisAlignment:</span> <span class="n">MainAxisAlignment</span><span class="o">.</span><span class="na">center</span><span class="p">,</span>
            <span class="nl">children:</span> <span class="p">&lt;</span><span class="n">Widget</span><span class="p">&gt;[</span>
              <span class="n">Text</span><span class="p">(</span>
                <span class="s">'Back button is disabled'</span><span class="p">,</span>
              <span class="p">),</span>
            <span class="p">],</span>
          <span class="p">),</span>
        <span class="p">),</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the above code, we have used the WillPopScope widget to disable the backbutton in Flutter. We have returned false from the onWillPop callback. This will prevent the user from navigating back to the previous screen.</p>

<h2 id="conclusion">Conclusion</h2>
<p>In this article, we have seen how to disable the backbutton in Flutter using the WillPopScope widget. We have also seen how to use the WillPopScope widget to intercept the back button press event. Thanks for reading this article. If you have any questions, please feel free to ask them using the email flutterrettulf@gmail.com</p>

<h2 id="references">References</h2>
<ol>
  <li><a href="https://api.flutter.dev/flutter/widgets/WillPopScope-class.html" target="_blank">WillPopScope</a></li>
</ol>]]></content><author><name></name></author><category term="Navigation" /><category term="WillPopScope" /><category term="Navigation" /><category term="Disable Back Button" /><category term="Flutter" /><summary type="html"><![CDATA[Introduction WillPopScope class in Flutter is used to create a Widget that registers a callback to veto attempts by the user to dismiss the enclosing ModalRoute. This is useful when you want to prevent the user from accidentally exiting the app or navigating back to the previous screen.]]></summary></entry><entry><title type="html">Flutter: Loading Static Image &amp;amp; Font Assets in Flutter App.</title><link href="https://flutterrettulf.com/static%20assets/2022/09/03/loading-static-image-font-assets-in-flutter-app.html" rel="alternate" type="text/html" title="Flutter: Loading Static Image &amp;amp; Font Assets in Flutter App." /><published>2022-09-03T00:00:00+05:30</published><updated>2022-09-03T00:00:00+05:30</updated><id>https://flutterrettulf.com/static%20assets/2022/09/03/loading-static-image-font-assets-in-flutter-app</id><content type="html" xml:base="https://flutterrettulf.com/static%20assets/2022/09/03/loading-static-image-font-assets-in-flutter-app.html"><![CDATA[<h2 id="what-are-static-assets">What are Static Assets?</h2>

<p>Static assets are the files that are bundled with the app and are not downloaded from the internet. Static assets are used to load images, fonts, and other files that are used in the app. Static assets are loaded using the <code class="language-plaintext highlighter-rouge">pubspec.yaml</code> file. The <code class="language-plaintext highlighter-rouge">pubspec.yaml</code> file is used to define the assets that are used in the app. The <code class="language-plaintext highlighter-rouge">pubspec.yaml</code> file is located in the root directory of the app.</p>

<h2 id="loading-static-image-assets-in-flutter-app">Loading Static Image Assets in Flutter App</h2>

<p><strong>Step 1:</strong> Create a folder named <code class="language-plaintext highlighter-rouge">assets</code> in the root directory of the app.
The <code class="language-plaintext highlighter-rouge">assets</code> folder is used to store all the static assets that are used in the app. The folder name can be anything, but we will use the <code class="language-plaintext highlighter-rouge">assets</code> folder name in this post.</p>

<p><strong>Step 2:</strong> Create a folder named <code class="language-plaintext highlighter-rouge">images</code> in the <code class="language-plaintext highlighter-rouge">assets</code> folder and add the image files that are used in the app.</p>

<p><strong>Step 3:</strong> Add the following code to the <code class="language-plaintext highlighter-rouge">pubspec.yaml</code> file.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">flutter</span><span class="pi">:</span>
  <span class="na">assets</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">assets/images/</span>
</code></pre></div></div>

<p>The above code is used to load the static image assets in the app. The <code class="language-plaintext highlighter-rouge">assets/images/</code> is the path to the folder that contains the image files.</p>

<p><strong>Step 4:</strong> Load the image assets in the app.</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Image</span><span class="o">.</span><span class="na">asset</span><span class="p">(</span><span class="s">'assets/images/image.png'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="loading-static-font-assets-in-flutter-app">Loading Static Font Assets in Flutter App</h2>

<p><strong>Step 1:</strong> Create a folder named <code class="language-plaintext highlighter-rouge">fonts</code> in the <code class="language-plaintext highlighter-rouge">assets</code> folder and add the font files that are used in the app.</p>

<p><strong>Step 2:</strong> Add the following code to the <code class="language-plaintext highlighter-rouge">pubspec.yaml</code> file.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">flutter</span><span class="pi">:</span>
  <span class="na">fonts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">family</span><span class="pi">:</span>  <span class="s">Roboto</span>
      <span class="na">fonts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">asset</span><span class="pi">:</span> <span class="s">assets/fonts/Roboto-Regular.ttf</span>
        <span class="pi">-</span> <span class="na">asset</span><span class="pi">:</span> <span class="s">assets/fonts/Roboto-Bold.ttf</span>
          <span class="na">weight</span><span class="pi">:</span> <span class="m">700</span>
</code></pre></div></div>

<p>The above code is used to load the static font assets in the app. The <code class="language-plaintext highlighter-rouge">Roboto</code> is the font family name. The <code class="language-plaintext highlighter-rouge">Roboto-Regular.ttf</code> is the regular font file. The <code class="language-plaintext highlighter-rouge">Roboto-Bold.ttf</code> is the bold font file. We can add as many font files as we want.</p>

<p><strong>Step 3:</strong> Load the font assets in the app.</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Text</span><span class="p">(</span>
  <span class="s">'Flutter'</span><span class="p">,</span>
  <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
    <span class="nl">fontFamily:</span> <span class="s">'Roboto'</span><span class="p">,</span>
    <span class="nl">fontWeight:</span> <span class="n">FontWeight</span><span class="o">.</span><span class="na">bold</span><span class="p">,</span>
  <span class="p">),</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>In this post, we learned how to load static image and font assets in Flutter App. We created a folder named <code class="language-plaintext highlighter-rouge">assets</code> in the root directory of the app. We created a folder named <code class="language-plaintext highlighter-rouge">images</code> in the <code class="language-plaintext highlighter-rouge">assets</code> folder and added the image files that are used in the app. We provided the necessary configuration in the <code class="language-plaintext highlighter-rouge">pubspec.yaml</code> file. We loaded the image assets in the app using the <code class="language-plaintext highlighter-rouge">Image.asset()</code> method. We created a folder named <code class="language-plaintext highlighter-rouge">fonts</code> in the <code class="language-plaintext highlighter-rouge">assets</code> folder and added the font files that are used in the app. We provided the necessary configuration in the <code class="language-plaintext highlighter-rouge">pubspec.yaml</code> file. We loaded the font assets in the app using the <code class="language-plaintext highlighter-rouge">TextStyle</code> class.</p>

<h2 id="references">References</h2>
<ol>
  <li><a href="https://docs.flutter.dev/development/ui/assets-and-images" target="_blank">Adding assets and Images</a></li>
</ol>]]></content><author><name></name></author><category term="Static Assets" /><category term="Assets" /><category term="Static Assets" /><category term="Image Assets" /><category term="Font Assets" /><summary type="html"><![CDATA[What are Static Assets?]]></summary></entry><entry><title type="html">How to use the WillPopScope widget in Flutter to show Press Back Button Again to Exit App?</title><link href="https://flutterrettulf.com/navigation/2022/09/03/press-back-button-again-to-exit-app-flutter-willpopscope-widget.html" rel="alternate" type="text/html" title="How to use the WillPopScope widget in Flutter to show Press Back Button Again to Exit App?" /><published>2022-09-03T00:00:00+05:30</published><updated>2022-09-03T00:00:00+05:30</updated><id>https://flutterrettulf.com/navigation/2022/09/03/press-back-button-again-to-exit-app-flutter-willpopscope-widget</id><content type="html" xml:base="https://flutterrettulf.com/navigation/2022/09/03/press-back-button-again-to-exit-app-flutter-willpopscope-widget.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>In this article, we will discuss how to use the WillPopScope widget in Flutter to show a snackbar saying press back button again to exit app.
If you are not familiar with the WillPopScope widget, you can read the article <a href="/navigation/2022/09/03/how-to-use-willpopscope-widget-in-flutter-with-examples.html">How to use the WillPopScope widget in Flutter</a></p>

<p>In order to exit the app, we need to press the back button twice. The first time we press the back button, we will show a snackbar saying press back button again to exit app. If the user presses the back button again within 2 seconds, the app will exit. If the user does not press the back button again within 2 seconds, the snackbar will be dismissed and the user will have to press the back button again to exit the app.</p>

<p><strong>Let’s see how to implement this functionality.</strong></p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">PressBackButtonAgainToExitApp</span> <span class="kd">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
  <span class="nd">@override</span>
  <span class="n">_PressBackButtonAgainToExitAppState</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span>
      <span class="n">_PressBackButtonAgainToExitAppState</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">_PressBackButtonAgainToExitAppState</span>
    <span class="kd">extends</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">PressBackButtonAgainToExitApp</span><span class="p">&gt;</span> <span class="p">{</span>
  <span class="n">DateTime</span><span class="o">?</span> <span class="n">_currentBackPressTime</span><span class="p">;</span>

  <span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="p">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">WillPopScope</span><span class="p">(</span>
      <span class="nl">onWillPop:</span> <span class="p">()</span> <span class="kd">async</span> <span class="p">{</span>
        <span class="n">DateTime</span> <span class="n">now</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">now</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">_currentBackPressTime</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span>
            <span class="n">now</span><span class="o">.</span><span class="na">difference</span><span class="p">(</span><span class="n">_currentBackPressTime</span><span class="o">!</span><span class="p">)</span> <span class="p">&gt;</span> <span class="n">Duration</span><span class="p">(</span><span class="nl">seconds:</span> <span class="mi">2</span><span class="p">))</span> <span class="p">{</span>
          <span class="n">_currentBackPressTime</span> <span class="o">=</span> <span class="n">now</span><span class="p">;</span>

          <span class="n">ScaffoldMessenger</span><span class="o">.</span><span class="na">of</span><span class="p">(</span><span class="n">context</span><span class="p">)</span><span class="o">.</span><span class="na">showSnackBar</span><span class="p">(</span>
            <span class="n">SnackBar</span><span class="p">(</span>
              <span class="nl">content:</span> <span class="n">Text</span><span class="p">(</span><span class="s">'Press back button again to exit'</span><span class="p">),</span>
            <span class="p">),</span>
          <span class="p">);</span>

          <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
      <span class="p">},</span>
      <span class="nl">child:</span> <span class="n">Scaffold</span><span class="p">(</span>
        <span class="nl">appBar:</span> <span class="n">AppBar</span><span class="p">(</span>
          <span class="nl">title:</span> <span class="n">Text</span><span class="p">(</span><span class="s">"WillPopScope Demo"</span><span class="p">),</span>
        <span class="p">),</span>
        <span class="nl">body:</span> <span class="n">Center</span><span class="p">(</span>
          <span class="nl">child:</span> <span class="n">Column</span><span class="p">(</span>
            <span class="nl">mainAxisAlignment:</span> <span class="n">MainAxisAlignment</span><span class="o">.</span><span class="na">center</span><span class="p">,</span>
            <span class="nl">children:</span> <span class="p">&lt;</span><span class="n">Widget</span><span class="p">&gt;[</span>
              <span class="n">Text</span><span class="p">(</span>
                <span class="s">'Press back button twice to exit app'</span><span class="p">,</span>
              <span class="p">),</span>
            <span class="p">],</span>
          <span class="p">),</span>
        <span class="p">),</span>
      <span class="p">),</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the above code, we have used the <code class="language-plaintext highlighter-rouge">WillPopScope</code> widget to intercept the back button press event. When the app is launched, the <code class="language-plaintext highlighter-rouge">_currentBackPressTime</code> variable will be null. When the user presses the back button, we will check if the <code class="language-plaintext highlighter-rouge">_currentBackPressTime</code> variable is null. If it is null, we will set the <code class="language-plaintext highlighter-rouge">_currentBackPressTime</code> variable to the current time and show a snackbar saying press back button again to exit app. If the user presses the back button again within 2 seconds, the app will exit. If the user does not press the back button again within 2 seconds, the snackbar will be dismissed and the user will have to press the back button again to exit the app.</p>

<h2 id="conclusion">Conclusion</h2>

<p>In this article, we have seen how to use the WillPopScope widget in Flutter to show a snackbar saying press back button again to exit app.</p>]]></content><author><name></name></author><category term="Navigation" /><category term="WillPopScope" /><category term="Navigation" /><category term="Double Back To Exit App" /><summary type="html"><![CDATA[Introduction]]></summary></entry></feed>